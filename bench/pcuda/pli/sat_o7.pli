/* 
  * SAT.pli:
  * This P-Lingua program defines a family of recognizer P systems 
  * to solve the SAT problem.
  *
  * For more information about P-Lingua see http://www.gcn.us.es/plingua.htm
  *
  * Copyright (C) 2008  Ignacio Perez-Hurtado (perezh@us.es)
  *                     Research Group On Natural Computing
  *                     http://www.gcn.us.es
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  *  along with this program.  If not, see <http://www.gnu.org/licenses/>. 
  */

@model<membrane_division>

def Sat(m,n)
{
 /* Initial configuration */
 @mu = [[]'2]'1;

 /* Initial multisets */
 @ms(2) = d{1};

 /* Set of rules */
 [d{k}]'2 --> +[d{k}]-[d{k}] : 1 <= k <= n;

 {
  +[x{i,1} --> r{i,1}]'2;
  -[nx{i,1} --> r{i,1}]'2;
  -[x{i,1} --> #]'2;
  +[nx{i,1} --> #]'2;
 } : 1 <= i <= m;

 {
  +[x{i,j} --> x{i,j-1}]'2;
  -[x{i,j} --> x{i,j-1}]'2;
  +[nx{i,j} --> nx{i,j-1}]'2;
  -[nx{i,j} --> nx{i,j-1}]'2;
 } : 1<=i<=m, 2<=j<=n;

 {
  +[d{k}]'2 --> []d{k};
  -[d{k}]'2 --> []d{k};
 } : 1<=k<=n;

 d{k}[]'2 --> [d{k+1}] : 1<=k<=n-1;
 [r{i,k} --> r{i,k+1}]'2 : 1<=i<=m, 1<=k<=2*n-1;
 [d{k} --> d{k+1}]'1 : n <= k<= 3*n-3;
 [d{3*n-2} --> d{3*n-1},e]'1;
 e[]'2 --> +[c{1}];
 [d{3*n-1} --> d{3*n}]'1;
 [d{k} --> d{k+1}]'1 : 3*n <= k <= 3*n+2*m+2;
 +[r{1,2*n}]'2 --> -[]r{1,2*n};
 -[r{i,2*n} --> r{i-1,2*n}]'2 : 1<= i <= m;
 r{1,2*n}-[]'2 --> +[r{0,2*n}];
 -[c{k} --> c{k+1}]'2 : 1<=k<=m;
 +[c{m+1}]'2 --> +[]c{m+1};
 [c{m+1} --> c{m+2},t]'1;
 [t]'1 --> +[]t;
 +[c{m+2}]'1 --> -[]Yes;
 [d{3*n+2*m+3}]'1 --> +[]No;

} /* End of Sat module */

/* Main module */
def main()
{
 /* Call to Sat module for m=2 and n=16 */
 
  call Sat(16,10);
 
 /* Expansion of the input multiset */
 
 @ms(2) += nx{1,1},x{1,2},nx{1,3},x{1,5},x{1,6},nx{1,8},nx{1,9},nx{1,10},x{2,1},nx{2,2},x{2,4},x{2,5},x{2,7},nx{2,8},nx{2,9},nx{2,10},x{3,2},nx{3,4},nx{3,5},nx{3,6},nx{3,7},nx{3,8},x{3,9},nx{3,10},x{4,1},nx{4,2},x{4,4},x{4,5},nx{4,6},nx{4,7},x{4,8},nx{4,10},x{5,1},nx{5,3},nx{5,5},x{5,6},nx{5,7},x{5,8},x{5,9},nx{5,10},x{6,1},nx{6,2},x{6,3},x{6,4},nx{6,6},x{6,7},x{6,8},nx{6,10},nx{7,1},x{7,3},x{7,4},x{7,5},nx{7,6},x{7,8},x{7,9},nx{7,10},nx{8,2},x{8,3},x{8,4},nx{8,5},x{8,6},x{8,8},x{8,9},nx{8,10},nx{9,1},nx{9,3},x{9,4},x{9,5},x{9,6},x{9,7},x{9,9},nx{9,10},x{10,1},nx{10,2},x{10,3},x{10,4},x{10,6},nx{10,7},nx{10,9},x{10,10},nx{11,1},x{11,2},nx{11,4},nx{11,5},x{11,6},x{11,7},nx{11,9},x{11,10},nx{12,1},nx{12,2},x{12,5},nx{12,6},x{12,7},nx{12,8},x{12,9},x{12,10},nx{13,2},x{13,3},nx{13,4},x{13,5},nx{13,6},nx{13,7},x{13,9},x{13,10},x{14,2},nx{14,3},nx{14,4},nx{14,5},x{14,6},x{14,8},x{14,9},x{14,10},nx{15,1},x{15,2},nx{15,3},nx{15,4},x{15,5},x{15,6},x{15,7},x{15,8},x{16,1},x{16,3},x{16,4},x{16,5},x{16,7},x{16,8},x{16,9},x{16,10};

;
 
 /* To define another P system of the family, call the Sat module with other parameters and 
    expand the input multiset with other values */
    
} /* End of main module */

